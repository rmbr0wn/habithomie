import React, { useState, useEffect } from "react";
import { useDispatch, useSelector } from "react-redux";

import Stopwatch from "./Stopwatch/Stopwatch.js";
import BarChart from "./Charts/BarChart.js";
import { getActivities } from "../../actions/activities.js";
import { getTimeEntries } from "../../actions/times.js";
import { convertSecondsToDecimalHours } from "../Helpers/TimeConversions.js"

export default function HomePage () {
  const storedUser = useSelector((state) => state.authReducer);
  const storedActivities = useSelector((state) => state.activitiesReducer);
  const storedTimes = useSelector((state) => state.timesReducer);
  const [email, setEmail] = useState("");
  const [chartData, setChartData] = useState();
  const [viewing, setViewing] = useState(false);
  const dispatch = useDispatch();

  // Send db fetch only if activities not already in redux store
  useEffect(() => {
    if (storedUser.authData && !storedActivities.activitiesData) {
      let userId = storedUser.authData.result.id;
      let fetchActivities = dispatch(getActivities(userId));
    }

    if (storedUser.authData && !storedTimes.timesData) {
      let userId = storedUser.authData.result.id;
      let fetchTimes = dispatch(getTimeEntries(userId));
    }
  }, []);

  useEffect(() => {
    if (storedUser.authData) {
      setEmail(storedUser.authData.result.email);
    }
  }, [storedUser]);

  useEffect(() => {
    if (storedActivities && storedTimes) {
      setChartData(formatChartData(storedActivities.activitiesData, storedTimes.timesData));
      // console.log(storedActivities.activitiesData);
      // console.log(storedTimes.timesData);
    }
  }, [storedActivities, storedTimes])


  /*TODO: need to combine the values of all time_values corresponding to a particular activity_id

  */
  function combineTimeEntries (times) {
    let timeMap = new Map();

    for (let i = 0; i < times.length; i++) {
      timeMap.set(times[i].activity_id, timeMap.get(times[i].activity_id) + times[i].time_value || 1 )
    }

    console.log(timeMap);
  }

  function formatChartData (activities, times) {
    let formattedData = {
      labels: activities.map((activity) => activity.activity_name),
      datasets: [
        {
          label: "Hours spent",                             // TODO: make this dynamic for future
          data: times.map((time) => convertSecondsToDecimalHours(time.time_value)),       // TODO: change to proper decimal hour format
          borderColor: "black",
          borderWidth: 2,
        },
      ],
    }
    return formattedData;
  }

  function toggleViewing () {
    setViewing(!viewing);
    combineTimeEntries(storedTimes.timesData);
  }

  return (
    <div className="dashboard-page-container-wrapper">
    { storedUser?.authData ?
      <div>
        <h1> The dashboard for {email}. </h1>
        <button onClick={toggleViewing}> Click </button>
        <Stopwatch />
        { viewing ?
          <div>
            <BarChart chartData={chartData} />
          </div>
          :
          null
        }
      </div>

      :
      <div>
        <h1> You need to login to use the dashboard page. </h1>
      </div>
    }
    </div>
  );
}
